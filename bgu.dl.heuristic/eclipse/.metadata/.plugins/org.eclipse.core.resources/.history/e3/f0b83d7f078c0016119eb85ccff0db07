package bgu.dl.features.collections;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Random;

import pddl4j.PDDLObject;
import pddl4j.exp.AtomicFormula;
import pddl4j.exp.Exp;
import pddl4j.exp.NotAtomicFormula;
import pddl4j.exp.term.Constant;

import bgu.dl.features.learning.PossibleGroundedLiterals;
import bgu.dl.features.learning.ProblemDetails;

/**
 * @author Shashank Shekhar
 * BGU of the Negev
 * @throws FileNotFoundException 
 */
public class DataSet 
{	
	ProblemDetails details;
	PDDLObject pddlObject;
	ArrayList<ArrayList<ArrayList>> listOfParentChild;
	ArrayList<PossibleGroundedActions> groundedActions; 	
	ArrayList<ArrayList<ArrayList>> listParentChildSuccessors;
	ArrayList<ArrayList> initialParentChildStates;

	public DataSet() {
		this.details = null;
		this.pddlObject = null;
		this.listOfParentChild = null;
		this.groundedActions = null;
		this.listParentChildSuccessors = null;
		this.initialParentChildStates = null;
	}
	public void dataSet(ProblemDetails details, PDDLObject object) {
		System.out.println("hello");
		this.details = details;
		this.pddlObject = object;
		initialParentChildStates.set(0, null);
		initialParentChildStates.set(1, details.getInitialState());
	}

	@SuppressWarnings("rawtypes")
	ArrayList initialState = this.details.getInitialState();
	@SuppressWarnings("rawtypes")
	ArrayList goalState = this.details.getGoalState();

	public void callForDatasetGeneration()
	{
		int counter = 0;
		File file;
		Writer writer;
		PossibleGroundedLiterals possibleGroundedLiterals = new PossibleGroundedLiterals(pddlObject);
		ArrayList<AtomicFormula> listOfPossiblePropositions = possibleGroundedLiterals.allPossibleLiteralsMayOccur();
		try {
			file = new File("/home/bgumodo1/Dropbox/Bgu-Files/bgu.dl.heuristic/eclipse/bgu.learning/src/bgu/dl/features/train.txt");
			writer = new BufferedWriter(new FileWriter(file));
			String header = "";
			for (int i = 0; i < listOfPossiblePropositions.size(); i++) {
				header = header + "\t" + listOfPossiblePropositions.get(i);				
			}
			writer.append(header);

			// Infinite call, pass the main training file.
			while (counter++ < 1000000 && initialParentChildStates.size() <= 0) 
			{			
				int randomIndex = randomNumber()-1;
				ArrayList<ArrayList> parentChildStates = initialParentChildStates.get(randomIndex);
				initialParentChildStates.remove(randomIndex);
				initialParentChildStates.addAll(getParentChildSuccessors(parentChildStates, writer, listOfPossiblePropositions));
			}
			writer.close();			
		} catch (IOException e) {			
			e.printStackTrace();
		}
	}

	/**
	 * Random Number Generator
	 * @return an index
	 */
	private int randomNumber() { 
		Random r = new Random();
		int Low = 1;
		int High = initialParentChildStates.size();
		int Result = r.nextInt(High-Low) + Low;
		return Result;
	}

	/**
	 * method generateSuccessorParentChild
	 * @return a list of two states (parent and its child)
	 * A state is also represented in form of a list
	 */
	private ArrayList<ArrayList<ArrayList>> getParentChildSuccessors(ArrayList<ArrayList> parentChildStates, Writer writer, ArrayList<AtomicFormula> listOfPossiblePropositions) 
	{
		ArrayList<ArrayList<ArrayList>> generateParentChildSuccessors = null;
		ArrayList parentState = parentChildStates.get(0);
		ArrayList childState = parentChildStates.get(1); 

		ArrayList<ArrayList> newParentChildStates = null;
		ArrayList<ArrayList> allPossibleStatetsInForwardDirection = allPossibleStatetsInForwardDirection(childState);

		/**
		 * Keep in mind that, training data points will be computed using each child state.
		 * Call to the Fast Downward by passing the child state, and
		 * the goal state. 
		 */
		PossibleGroundedLiterals possibleGroundedLiterals = new PossibleGroundedLiterals(pddlObject);		
		ArrayList<Integer> listOfIntegersCorrespondingToLiterals = generateDataset(childState, listOfPossiblePropositions);
		int target = targetByFastDownward(childState, goalState, possibleGroundedLiterals);
		listOfIntegersCorrespondingToLiterals.add(target);
		// write each training point into a file
		String data = "";
		for (int i = 0; i < listOfIntegersCorrespondingToLiterals.size(); i++) {
			data = data +	"	"+listOfIntegersCorrespondingToLiterals.get(i);
		}
		try {
			writer.append(data);
		} catch (IOException e) {			
			e.printStackTrace();
		}
		for (int i = 0; i < allPossibleStatetsInForwardDirection.size(); i++) {
			if(! isSuccessorItsParentState(parentState,allPossibleStatetsInForwardDirection.get(i))) {
				newParentChildStates.set(0, childState);
				newParentChildStates.set(1, allPossibleStatetsInForwardDirection.get(i));
			}
			generateParentChildSuccessors.add(newParentChildStates);			
		}
		return generateParentChildSuccessors;
	}

	/**
	 * Function call to the fast downward planner | keep in mind that we will kill this call after certain time (say 30 minutes). 
	 * @param initialState
	 * @param goalState
	 * @return returns the target value;
	 */
	private Integer targetByFastDownward(ArrayList initialState, ArrayList goalState, PossibleGroundedLiterals possibleGroundedLiterals) {
		int target = 1000000;
		ArrayList<Constant> listOfConstants = possibleGroundedLiterals.listOfConstants();
		// a call to create a problem file with new initial state
		generateProblemFile(initialState);

		// a call to the fast downward python script
		try {
			String[] command = {
					"/home/bgumodo1/Documents/Copy-IITM/Research-Edited/Fast-Downward/fast-downward.py",
					"/home/bgumodo1/Dropbox/Bgu-Files/bgu.dl.heuristic/IPC-2/Blocks/Untyped/domain.pddl",
					"/home/bgumodo1/Dropbox/Bgu-Files/bgu.dl.heuristic/IPC-2/Blocks/Untyped/probBLOCKS-4-1.pddl",
					"--heuristic",
					"h=ff()",
					"--search",
					"lazy_greedy(h, preferred=h)"
			};
			Process pro = Runtime.getRuntime().exec(command);
			BufferedReader in = new BufferedReader(new InputStreamReader(pro.getInputStream()));
			String line = null;
			String[] planDetails = null;
			while ((line = in.readLine()) != null) {
				if (line.contains("Plan length")) {
					planDetails = line.split(" ");
				}		
			}
			target = Integer.getInteger(planDetails[1]);

		} catch (Exception e) {
			System.err.println("Error in writing the planner output in file !!");
		}
		return target;
	}

	/**
	 * Will write a new initial state 
	 * @param initialState
	 * @param goalState
	 * @param listOfConstants
	 */
	private void generateProblemFile(ArrayList initialState) {
		String oldFileName = "/home/bgumodo1/Dropbox/Bgu-Files/bgu.dl.heuristic/eclipse/bgu.learning/src/bgu/dl/features/learning/problem.pddl";
		String newState = "";
		for (int i = 0; i < initialState.size(); i++) {
			newState = newState + initialState.get(i).toString();
		}
		String line = null;
		try {
			FileReader fr = new FileReader(oldFileName);
			BufferedReader br = new BufferedReader(fr);
			FileWriter fw = new FileWriter(oldFileName);
			BufferedWriter bw = new BufferedWriter(fw);
			boolean flagInit = false;
			boolean flagGoal = false;
			while ((line = br.readLine()) != null) {
				if (!flagInit && line.contains("INIT")) {
					flagInit = true; continue;
				}
				if (flagInit) {
					line = br.readLine();
					line.replace(line, newState);
					flagInit = false;
				} 
				bw.write(line);
			}              
		}     //end try
		catch (Exception e) {
			System.err.println("Exception in updating the initial state");
		}
	}
	// Calling to feed -1, 0, 1 corresponding to each entry in the list of proposition
	private ArrayList<Integer> generateDataset(ArrayList initialState, ArrayList<AtomicFormula> listOfPossiblePropositions) 
	{
		ArrayList<Integer> listOfInt = new ArrayList<>(listOfPossiblePropositions.size());
		for (int i = 0; i < listOfPossiblePropositions.size(); i++) {
			AtomicFormula af = listOfPossiblePropositions.get(i);
			int val = 0; 
			for (int j = 0; j < initialState.size(); j++) {
				AtomicFormula fromInit = (AtomicFormula)initialState.get(j);
				if (fromInit.getClass().equals(AtomicFormula.class)) {
					if (fromInit.toString().equals(af.toString()))
						val = 1;
					break;
				} else if (fromInit.getClass().equals(NotAtomicFormula.class)){
					if (fromInit.toString().equals(af.toString()))
						val = -1;
					break;
				}
			}
			listOfInt.set(i, val);
		}
		return listOfInt;
	}

	private ArrayList<ArrayList> allPossibleStatetsInForwardDirection(ArrayList childNode) {
		ArrayList<PossibleGroundedActions> getApplicableActions = getApplicableActions(childNode);
		if(getApplicableActions == null) {
			System.out.println("No actions are appicable on this child node: returning null");
			return null;
		}		
		ArrayList<ArrayList> listOfSuccessorStates = null;
		for (int i = 0; i < getApplicableActions.size(); i++) {
			listOfSuccessorStates.add(applyAction(getApplicableActions.get(i), childNode)); 
		}
		return listOfSuccessorStates;
	}

	/**
	 * Generate all applicable actions
	 * @param childNode
	 * @return applicable actions
	 */
	@SuppressWarnings("unused")
	private ArrayList<PossibleGroundedActions> getApplicableActions(ArrayList<AtomicFormula> childNode) {
		ArrayList<PossibleGroundedActions> applicableActions = new ArrayList<PossibleGroundedActions>();
		@SuppressWarnings("rawtypes")
		Iterator itr = groundedActions.iterator();
		while(itr.hasNext()) {
			PossibleGroundedActions ga = (PossibleGroundedActions) itr.next();
			ArrayList<AtomicFormula> preCond = ga.getPreCond();			
			if(isSubsetOf(preCond,childNode)) {
				applicableActions.add(ga);
			}
		}
		return applicableActions;
	}

	/**
	 * Check whether state g is a subset of current state curr
	 * @param g
	 * @param cur
	 * @return
	 */
	private boolean isSubsetOf(ArrayList<AtomicFormula> g, ArrayList<AtomicFormula> cur) {
		return(cur.containsAll(g));		
	}

	/**
	 * Applies a grounded action on the given state
	 * @param groundedAction
	 * @param childNode
	 * @return A successor state
	 */
	@SuppressWarnings("unused")
	private ArrayList<AtomicFormula> applyAction(PossibleGroundedActions groundedAction, ArrayList<AtomicFormula> childNode) {
		ArrayList<AtomicFormula> successorState = new ArrayList<AtomicFormula>();
		// groundedAction.printGroundedAction();
		successorState.addAll(childNode);
		ArrayList<Exp> removeNeg = new ArrayList<Exp>();

		/** Formula: S_{new} = {S_{curr} - stt^{-}(a)} U {eff^{+}(a)} */
		Iterator<AtomicFormula> itrNew = successorState.iterator();
		while(itrNew.hasNext()) {
			Exp exp = itrNew.next();
			if(groundedAction.getNegEff().contains(exp))
				removeNeg.add(exp);
		}
		/** Set Operations */
		successorState.removeAll(removeNeg);
		successorState.addAll(groundedAction.getPosEff());
		return successorState;
	}

	/**
	 * Check if the successor state is the parent node.
	 * @param newState
	 * @return
	 */
	private boolean isSuccessorItsParentState(ArrayList parentState, ArrayList<AtomicFormula> successorState) {
		if(parentState.containsAll(successorState) && successorState.containsAll(parentState))
			return true;
		return false;
	}
}


