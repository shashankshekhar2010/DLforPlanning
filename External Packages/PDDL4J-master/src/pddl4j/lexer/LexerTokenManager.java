/* Generated By:JJTree&JavaCC: Do not edit this line. LexerTokenManager.java */
package pddl4j.lexer;
import java.io.InputStream;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import pddl4j.ErrorManager;
import pddl4j.ErrorManager.Message;

public class LexerTokenManager implements LexerConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000000000120L) != 0L)
            return 2;
         if ((active0 & 0x218098000L) != 0L || (active1 & 0x77ffffffcL) != 0L)
         {
            jjmatchedKind = 99;
            return 5;
         }
         if ((active1 & 0x2L) != 0L)
            return 5;
         return -1;
      case 1:
         if ((active0 & 0x100L) != 0L)
            return 0;
         if ((active0 & 0x218098000L) != 0L || (active1 & 0x67fbeff7cL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 99;
               jjmatchedPos = 1;
            }
            return 5;
         }
         if ((active1 & 0x100410080L) != 0L)
            return 5;
         return -1;
      case 2:
         if ((active1 & 0x5000500L) != 0L)
            return 5;
         if ((active0 & 0x218098000L) != 0L || (active1 & 0x67abffa7cL) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 2;
            return 5;
         }
         return -1;
      case 3:
         if ((active0 & 0x10000000L) != 0L || (active1 & 0x2000000L) != 0L)
            return 5;
         if ((active0 & 0x208098000L) != 0L || (active1 & 0x678bffa7cL) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 3;
            return 5;
         }
         return -1;
      case 4:
         if ((active1 & 0x800200L) != 0L)
            return 5;
         if ((active0 & 0x208098000L) != 0L || (active1 & 0x6783ff87cL) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 4;
            return 5;
         }
         return -1;
      case 5:
         if ((active0 & 0x208000000L) != 0L || (active1 & 0x78374078L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 99;
               jjmatchedPos = 5;
            }
            return 5;
         }
         if ((active0 & 0x98000L) != 0L || (active1 & 0x60008b804L) != 0L)
            return 5;
         return -1;
      case 6:
         if ((active0 & 0x200000000L) != 0L)
            return 5;
         if ((active0 & 0x8000000L) != 0L || (active1 & 0x783f4078L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 6;
            return 5;
         }
         return -1;
      case 7:
         if ((active0 & 0x8000000L) != 0L || (active1 & 0x48390010L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 99;
               jjmatchedPos = 7;
            }
            return 5;
         }
         if ((active1 & 0x30064068L) != 0L)
            return 5;
         return -1;
      case 8:
         if ((active0 & 0x8000000L) != 0L || (active1 & 0x483f0010L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 99;
               jjmatchedPos = 8;
            }
            return 5;
         }
         return -1;
      case 9:
         if ((active1 & 0x401f0000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 99;
               jjmatchedPos = 9;
            }
            return 5;
         }
         if ((active0 & 0x8000000L) != 0L || (active1 & 0x8200010L) != 0L)
            return 5;
         return -1;
      case 10:
         if ((active1 & 0xf0000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 10;
            return 5;
         }
         if ((active1 & 0x40100000L) != 0L)
            return 5;
         return -1;
      case 11:
         if ((active1 & 0xe0000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 11;
            return 5;
         }
         if ((active1 & 0x10000L) != 0L)
            return 5;
         return -1;
      case 12:
         if ((active1 & 0x80000L) != 0L)
            return 5;
         if ((active1 & 0x60000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 12;
            return 5;
         }
         return -1;
      case 13:
         if ((active1 & 0x20000L) != 0L)
            return 5;
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 13;
            return 5;
         }
         return -1;
      case 14:
         if ((active1 & 0x40000L) != 0L)
            return 5;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);
      case 40:
         return jjStopAtPos(0, 13);
      case 41:
         return jjStopAtPos(0, 14);
      case 42:
         return jjStopAtPos(0, 62);
      case 43:
         return jjStopAtPos(0, 64);
      case 45:
         return jjStartNfaWithStates_0(0, 65, 5);
      case 47:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x120L, 0x0L);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x1fffffde7f60000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 6);
      case 60:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 61:
         return jjStopAtPos(0, 61);
      case 62:
         jjmatchedKind = 57;
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);
      case 63:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4492104L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x18000L, 0x40L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x1001000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x300000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000220L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x30000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000400L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x402000080L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x208000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x864018L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x8000L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 0);
         break;
      case 47:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 61:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000800000L, active1, 0x10000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0800080100000L, active1, 0x18L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x10c040560000000L, active1, 0x80000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x180004008000L, active1, 0x40L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000400000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000080000L, active1, 0x20008000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4082000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0x200L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0x1000120L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x800010000L, active1, 0x8364c00L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000003200000L, active1, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 71, 5);
         return jjMoveStringLiteralDfa2_0(active0, 0x208020000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0x40000004L);
      case 84:
      case 116:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 96, 5);
         return jjMoveStringLiteralDfa2_0(active0, 0x10010000040000L, active1, 0x810000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0x200000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40010000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0x800018L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0x60L);
      case 68:
      case 100:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 72, 5);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 88, 5);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8024118020000L, active1, 0x2000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x4008000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x10040000000000L, active1, 0x1000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000000L);
      case 76:
      case 108:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 90, 5);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0x300000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0x200064000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x201000000000L, active1, 0x20000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0802680100000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000002200000L, active1, 0x800L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4L);
      case 84:
      case 116:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 74, 5);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000080000L, active1, 0x8008000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x104400060400000L, active1, 0x80000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x82000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0x10000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000040000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x402000010000L, active1, 0x8082800L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0x200000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x300000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000002200000L, active1, 0x400064000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0x8000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x301000008000L, active1, 0x30000004L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(3, 49);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x218L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000400000000L, active1, 0x10000L);
      case 78:
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0xc0800080500000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000040000L, active1, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 89, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0x10c008161000000L, active1, 0x80800060L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0x1000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000800000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1080000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x300000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1040a0461000000L, active1, 0x80000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2400000L, active1, 0x400000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x800080200000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x1100080c0c0000L, active1, 0x200000078L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8018100810000L, active1, 0x40008000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(4, 37);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0x8000800L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x30000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000008000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x40100000100000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(4, 36);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 87, 5);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0x65000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0L);
      case 89:
      case 121:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 73, 5);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x82000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x18L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200060L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x804000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0x100000L);
      case 69:
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 5);
         return jjMoveStringLiteralDfa6_0(active0, 0x20200200000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x80804480220000L, active1, 0x30064000L);
      case 76:
      case 108:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 5);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 5);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 5);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 5);
         return jjMoveStringLiteralDfa6_0(active0, 0x1010000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x2800000L, active1, 0x40000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 5);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 97, 5);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(5, 18);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 76, 5);
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x90000L);
      case 84:
      case 116:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 98, 5);
         return jjMoveStringLiteralDfa6_0(active0, 0x144520060500000L, active1, 0x80000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000100000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0x80000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(6, 38);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x8100109000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000L);
      case 71:
      case 103:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(6, 40);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x1044a0060400000L, active1, 0x80000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000L);
      case 77:
      case 109:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 5);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x64000L);
      case 78:
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(6, 23);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(6, 34);
         return jjMoveStringLiteralDfa7_0(active0, 0x80040002000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x60200000020000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(6, 39);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x60L);
      case 84:
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(6, 26);
         return jjMoveStringLiteralDfa7_0(active0, 0x1800880000000L, active1, 0x8010000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100008L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x30000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000200000L, active1, 0x40000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x8000002000000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 69, 5);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 5);
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 92, 5);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 93, 5);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000020000L, active1, 0x60000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x10800080000000L, active1, 0x8000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x100008100000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000040400000L, active1, 0x80000010L);
      case 80:
      case 112:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 67, 5);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000L);
      case 83:
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(7, 35);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(7, 48);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x80001000000L, active1, 0x200000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x4020020000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L, active1, 0x60000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x4020021000000L, active1, 0x200000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x40400002000000L, active1, 0x180000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000L, active1, 0x8000000L);
      case 78:
      case 110:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(8, 95);
         return jjMoveStringLiteralDfa9_0(active0, 0x130000000400000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x800080000000L, active1, 0x10000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x140000300000L, active1, 0x40000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10L);
      case 89:
      case 121:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(8, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x104020020000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 27, 5);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 91, 5);
         return jjMoveStringLiteralDfa10_0(active0, 0x400000220000L, active1, 0x40000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x10140000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(9, 68, 5);
         return jjMoveStringLiteralDfa10_0(active0, 0x40800000000000L, active1, 0x110000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 85, 5);
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(9, 20);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(9, 22);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000L, active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x4900020000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10000L);
      case 68:
      case 100:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(10, 94, 5);
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0xa0000000000000L, active1, 0x40000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000L);
      case 71:
      case 103:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(10, 84, 5);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000002000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(10, 21);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(10, 24);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x50000000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000020000000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(11, 80, 5);
         return jjMoveStringLiteralDfa12_0(active0, 0x8040000000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000000L, active1, 0x40000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000000L, active1, 0x80000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x900000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(11, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(11, 54);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000L, active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa13_0(active0, 0x940000000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x100020000000000L, active1, 0x20000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(12, 25);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(12, 83, 5);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x40000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(12, 17);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000020000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x80a00000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0xc000020000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0x140000000000L, active1, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(13, 81, 5);
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000000L, active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0x88200000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(14, 82, 5);
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x4020020000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x140000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x108000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x140000000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0x10000000000000L);
      case 78:
      case 110:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 15;
         }
         return jjMoveStringLiteralDfa16_0(active0, 0x4020000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0x140000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa17_0(active0, 0x20000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x10000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x100000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0x200000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000000000L);
      case 83:
      case 115:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(16, 50);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(16, 55);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa18_0(active0, 0x200000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x100020000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa18_0(active0, 0x400000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x140000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa19_0(active0, 0x400000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0x10000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0x200000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa19_0(active0, 0x140000000000L);
      case 83:
      case 115:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(18, 51);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x100820000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa20_0(active0, 0x140000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x100420000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa20_0(active0, 0x10000000000000L);
      case 83:
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(19, 47);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa20_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa21_0(active0, 0x10000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0x100000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0x340000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0x20000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa21_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa22_0(active0, 0x400000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa22_0(active0, 0x10000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa22_0(active0, 0x20000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa22_0(active0, 0x200000000000L);
      case 83:
      case 115:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(21, 56);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa22_0(active0, 0x140000000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
private final int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa23_0(active0, 0x140000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa23_0(active0, 0x200000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa23_0(active0, 0x400000000000L);
      case 83:
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(22, 41);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(22, 52);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L);
}
private final int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa24_0(active0, 0x400000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa24_0(active0, 0x140000000000L);
      case 83:
      case 115:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(23, 45);
         break;
      default :
         break;
   }
   return jjStartNfa_0(22, active0, 0L);
}
private final int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa25_0(active0, 0x140000000000L);
      case 83:
      case 115:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(24, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_0(23, active0, 0L);
}
private final int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(25, 42);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(25, 44);
         break;
      default :
         break;
   }
   return jjStartNfa_0(24, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 9;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 100)
                        kind = 100;
                     jjCheckNAddTwoStates(6, 7);
                  }
                  else if ((0x200800000000L & l) != 0L)
                  {
                     if (kind > 99)
                        kind = 99;
                     jjCheckNAdd(5);
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x200800000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff200800000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar != 46)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAdd(8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(5);
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 7)
                     kind = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x800L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
"\50", "\51", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\76", "\74", "\76\75", "\74\75", "\75", "\52", "\57", "\53", "\55", 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\77", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 1, 2, 3, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffe001L, 0x9fffffffffL, 
};
static final long[] jjtoSkip = {
   0xe1eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xe00L, 0x0L, 
};
static final long[] jjtoMore = {
   0x11e0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[9];
private final int[] jjstateSet = new int[18];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public LexerTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public LexerTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 9; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 7 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                         input_stream.backup(1);
         break;
      default : 
         break;
   }
}
}
