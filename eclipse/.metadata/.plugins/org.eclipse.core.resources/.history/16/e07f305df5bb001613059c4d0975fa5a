package bgu.dl.features.learning;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import pddl4j.exp.term.Constant;

import bgu.dl.features.collections.PlanDetails;
import bgu.dl.features.collections.PropContextDataSet;

/**
 * @author Shashank Shekhar
 * BGU of the Negev
 * */
public class MainCallRandomProblemDatasetGeneration 
{
	public static void main(String[] args) throws IOException {
		MainCallRandomProblemDatasetGeneration problem = new MainCallRandomProblemDatasetGeneration();
		problem.generateProblemFile();
	}

	public void generateProblemFile() throws IOException
	{		
		ArrayList<String> blocksList = new ArrayList<String>();
		blocksList.add("ontable");
		for (char letter = 'A'; letter <= 'Z'; letter++) {			
			blocksList.add(""+letter);
		}
		@SuppressWarnings("resource")
		BufferedReader br = 
		new BufferedReader(new 
				FileReader("/home/shashank/Documents/Copy-IITM/Planning-Domain-IPC2/2000-Tests/Blocks/Generator/blocksworld-generator/bwstates/ssss"));

		String line = new String();
		ArrayList<ArrayList<Integer>> listOfStates = new ArrayList<ArrayList<Integer>>();
		// 'listOfStates' will contain all states in integer form, 0 represents on-table
		ArrayList<Integer> list;
		while (null != (line = br.readLine())) {
			String[] line_parts = line.split(" ");
			list = new ArrayList<Integer>();
			for (int i = 0; i < line_parts.length; i++) {
				String str = (String)line_parts[i];
				int x = Integer.parseInt(str);
				list.add(x);
			} 
			listOfStates.add(list);
		}

		// Now play with these numbers.
		for (int i = 0, j=listOfStates.size()-1; i < listOfStates.size(); i++, j--) 
		{
			ArrayList<Integer> initNumber = listOfStates.get(i);
			ArrayList<Integer> goalNumber = listOfStates.get(j);

			ArrayList<String> objectList = new ArrayList<String>();
			ArrayList<String> initialState = new ArrayList<String>();
			ArrayList<String> goalState = new ArrayList<String>();

			// Capturing ALL relations for the initial state
			initialState.add("(HANDEMPTY)");
			for (int k = 0; k < initNumber.size(); k++) {
				int index = initNumber.get(k);
				int index_onto = k+1;
				objectList.add(blocksList.get(index_onto));

				if (index != 0) {
					String block_under = blocksList.get(index);
					String block_above = blocksList.get(index_onto);				
					String prop = "(ON "+block_above+" "+block_under+")";
					initialState.add(prop);
				}
				else {
					String block_above = blocksList.get(index_onto);				
					String prop = "(ONTABLE "+block_above+")";
					initialState.add(prop);
				}
				if(!initNumber.contains(index_onto))
				{
					String block_above = blocksList.get(index_onto);
					String prop = "(CLEAR "+block_above+")";
					initialState.add(prop);
				}
			}

			// Capturing ALL relations for the goal state
			goalState.add("(HANDEMPTY)");
			for (int k = 0; k < goalNumber.size(); k++) {
				int index = goalNumber.get(k);
				int index_onto = k+1;
				if (index != 0) {
					String block_under = blocksList.get(index);
					String block_above = blocksList.get(index_onto);				
					String prop = "(ON "+block_above+" "+block_under+")";
					goalState.add(prop);
				}
				else {
					String block_above = blocksList.get(index_onto);				
					String prop = "(ONTABLE "+block_above+")";
					goalState.add(prop);
				}
				if(!goalNumber.contains(index_onto))
				{
					String block_above = blocksList.get(index_onto);
					String prop = "(CLEAR "+block_above+")";
					goalState.add(prop);
				}
			}

			// Instantiate for the bootstrapping purpose
			String pathToTheRandProblem = "/home/shashank/Dropbox/Bgu-Files/bgu.dl.heuristic/eclipse/bgu.learning/src/bgu/dl/features/learning/Rand-Problem/problem.pddl";
			String pathToTheBWDomain = "/home/shashank/Dropbox/Bgu-Files/bgu.dl.heuristic/eclipse/bgu.learning/src/bgu/dl/features/learning/Rand-Problem/domain.pddl";

			// Generates a complete problem file	
			generateRandomProblemFile(initialState, goalState, objectList, pathToTheRandProblem);
			// Solve the same problem using FD.
			PlanDetails planDetails = targetByFastDownward(pathToTheRandProblem);

			InstantiatedByRandomProblem instantiatedByRandomProblem = new InstantiatedByRandomProblem();
			instantiatedByRandomProblem.instantiationUsingARandomProblem(pathToTheBWDomain, pathToTheRandProblem, planDetails);
		}
	}

	/**
	 * Function call to the fast-downward (FD) planner | keep in mind that the call gets killed after a certain time (say after 30 minutes). 
	 * @param initialState
	 * @param goalState
	 * @return returns the target value, basically, the plan length found by the FD planner.
	 * */
	private PlanDetails targetByFastDownward(String pathToTheRandProblem) 
	{
		int target = 1000000;
		ArrayList<String> plan = new ArrayList<String>();
		PlanDetails details =  new PlanDetails();
		try 
		{
			String[] command = 
				{
					"/home/shashank/Documents/Copy-IITM/Research-Edited/Fast-Downward/fast-downward.py",
					"/home/shashank/Dropbox/Bgu-Files/bgu.dl.heuristic/eclipse/bgu.learning/src/bgu/dl/features/learning/domain.pddl",
					pathToTheRandProblem,
					"--heuristic",
					"h=ff()",
					"--search",
					"lazy_greedy(h, preferred=h)"
				};

			Process pro = Runtime.getRuntime().exec(command);
			BufferedReader in = new BufferedReader(new InputStreamReader(pro.getInputStream()));
			String line = null;
			String[] planDetails = null;
			boolean firstLine = false;
			boolean secondLine = false;
			int count = 0;
			while ((line = in.readLine()) != null) 
			{
				// Conditions for getting the real plans
				if(firstLine) 
					count++;
				if (line.contains("Actual search")) 
					firstLine = true;
				if (line.contains("Plan length"))  
					secondLine = true;

				if(firstLine && count >= 1 && !secondLine) {					
					String[] currAction = line.split(" ");
					String str = "(";
					for (int i = 0; i < currAction.length; i++) {
						if (i < currAction.length-1) { 
							if(i < currAction.length-2) 
								str = str + currAction[i] + " ";
							else
								str = str + currAction[i];
						}
					}
					str = str + ")";		
					plan.add(str.toString());
				}
				// Conditions for getting the real targets predicted by FD.
				if (line.contains("Plan length")) {
					planDetails = line.split(" ");
				}
			}	
			target = Integer.parseInt(planDetails[2]);
			details.setPlanLength(target);
			details.setGeneratedRealPlan(plan);
			// The real plan extraction is ridiculously done, really need an update on that!
		} catch (Exception e) {
			System.err.println("Error in writing the planner output in file !!");
		}
		return details; 
	}

	// Generate a random problem file "problem.pddl" 
	private void generateRandomProblemFile(ArrayList<String> initialState, ArrayList<String> goalState, ArrayList<String> objectlist, String problempath) 
	{ 
		List<String> lines = new ArrayList<String>();
		String line = null;
		try {
			File f1 = new File(problempath);
			FileReader fr = new FileReader(f1);
			BufferedReader br = new BufferedReader(fr);

			String str ="(:init ";
			for (int i = 0; i < initialState.size(); i++) {
				str = str + initialState.get(i).toString();
			}
			str = str + ")";

			while ((line = br.readLine()) != null) {
				if (line.contains(":init") || line.contains(":INIT") )
				{
					line = line.replace(line, str);
				}
				lines.add(line);
			}			
			fr.close();
			br.close();

			FileWriter fw = new FileWriter(f1);
			BufferedWriter out = new BufferedWriter(fw);
			for(String s : lines)
			{
				out.write(s);
				out.write("\n");
			}
			out.flush();
			out.close();

			lines = new ArrayList<String>();
			File f2 = new File("/home/shashank/Dropbox/Bgu-Files/bgu.dl.heuristic/eclipse/bgu.learning/src/bgu/dl/features/learning/problems/problem.pddl");
			fr = new FileReader(f2);
			br = new BufferedReader(fr);
			str = new String();
			str = "(:goal (AND ";
			for (int i = 0; i < goalState.size(); i++) {
				str = str + goalState.get(i).toString();
			}
			str = str + "))";

			while ((line = br.readLine()) != null) {
				if (line.contains(":goal") || line.contains(":GOAL") )
				{
					line = line.replace(line, str);
				}
				lines.add(line);
			}

			fr.close();
			br.close();

			fw = new FileWriter(f2);
			out = new BufferedWriter(fw);
			for(String s : lines)
			{
				out.write(s);
				out.write("\n");
			}
			out.flush();
			out.close();

			lines = new ArrayList<String>();
			f2 = new File("/home/shashank/Dropbox/Bgu-Files/bgu.dl.heuristic/eclipse/bgu.learning/src/bgu/dl/features/learning/problems/problem.pddl");
			fr = new FileReader(f2);
			br = new BufferedReader(fr);
			str = new String();
			str = "(:objects ";
			for (int i = 0; i < objectlist.size(); i++) {
				str = str +" "+ objectlist.get(i).toString();
			}
			str = str + ")";

			while ((line = br.readLine()) != null) {
				if (line.contains(":objects") || line.contains(":OBJECTS") )
				{
					line = line.replace(line, str);
				}
				lines.add(line);
			}

			fr.close();
			br.close();

			fw = new FileWriter(f2);
			out = new BufferedWriter(fw);
			for(String s : lines)
			{
				out.write(s);
				out.write("\n");
			}
			out.flush();
			out.close();

		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
}