package bgu.dl.features.learning;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Set;

import org.paukov.combinatorics.Factory;
import org.paukov.combinatorics.Generator;
import org.paukov.combinatorics.ICombinatoricsVector;

import pddl4j.PDDLObject;
import pddl4j.exp.AtomicFormula;
import pddl4j.exp.Exp;
import pddl4j.exp.term.Constant;
import pddl4j.exp.term.Variable;

/**
 * @author Shashank Shekhar
 * BGU of the Negev
 */
public class PossibleGroundedLiterals {
	PDDLObject pddlObject = null;
	public PossibleGroundedLiterals(PDDLObject pddlObject){
		this.pddlObject = pddlObject;
	}

	public void name() {		
		ArrayList<AtomicFormula> ungroundedLiterals = listOfUngroundedLiterals();
		

	}
	
	private ArrayList allPossibleFormOfaLiteral(AtomicFormula literal) {
		ArrayList<Constant> constants = listOfConstants();
		Set<Variable> freeVar = literal.getFreeVariables();
		int noOfFreeVar = freeVar.size();
		Exp lit = literal;
		ArrayList<ArrayList<Constant>> allPossibleCombi = generateAllCombinations(constants, noOfFreeVar);
		
		
		
		return null;
	}

	/**
	 * This function generates combinations of constants, depending on the number selected (nCr).
	 * @param constants
	 * @param noOfFreeVar
	 * @return
	 */
	private ArrayList<ArrayList<Constant>> generateAllCombinations(ArrayList constants, int noOfFreeVar) 
	{
		ArrayList<ArrayList<Constant>> combi = new ArrayList<ArrayList<Constant>>();
		// Create the initial vector
		String freeVar[] = new String[constants.size()];
		for(int i=0,j=0;j<constants.size();i++,j++) {
			freeVar[i]=constants.get(j).toString();
		}
		ICombinatoricsVector<String> initialVector = Factory.createVector(freeVar);
		// Create a simple combination generator to generate noFreeVar-combinations of the initial vector
		Generator<String> gen = Factory.createSimpleCombinationGenerator(initialVector, noOfFreeVar);

		// Read all possible combinations
		for (ICombinatoricsVector<String> combination : gen) {
			java.util.List<String> l = combination.getVector();
			ICombinatoricsVector<String> temp = Factory.createVector(l);
			Generator<String> genPerm = Factory.createPermutationGenerator(temp);
			for (ICombinatoricsVector<String> perm : genPerm) {
				java.util.List<String> p = perm.getVector();
				ArrayList<Constant> c = new ArrayList<Constant>();
				Iterator<String> itr = p.iterator();
				while(itr.hasNext()) {
					c.add(new Constant(itr.next()));				
				}
				combi.add(c);
			}
		}	
		return combi;
	}

	private ArrayList<Constant> listOfConstants() {
		ArrayList<Constant> listOfCons = null;
		Iterator<Constant> iterator = pddlObject.constantsIterator();
		while(iterator.hasNext())
			listOfCons.add(iterator.next());
		return listOfCons;
	}

	private ArrayList<AtomicFormula> listOfUngroundedLiterals() {
		ArrayList<AtomicFormula> listOfUngroundedLiterals = null;
		Iterator<AtomicFormula> itr = pddlObject.predicatesIterator();
		while(itr.hasNext()) 
			listOfUngroundedLiterals.add(itr.next());		
		return listOfUngroundedLiterals;
	}

}
