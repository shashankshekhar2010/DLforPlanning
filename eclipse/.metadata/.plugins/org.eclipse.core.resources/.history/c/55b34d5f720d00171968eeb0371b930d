"""Objects passed from an achieve PLP to its callback object.
Possibly auto-generated from ROS message def files, refereneced from
the PLP document.
"""


class PLPFailureMode(object):
    """
    A failure scenario, complete with its probability, estimated time to fail, and name.
    """
    def __init__(self):
        self.name = None
        self.probability = None

    def __repr__(self):
        return "(%s, probability:%s)" % (self.name, self.probability)


class PLPAchieveEstimation(object):
    """
    A result of an estimation of a PLP
    Fields are:
    success: probability ([0..1])
    success_time: Time to achieve success
    side_effects: Dictionary from string to the side effect (e.g. {'fuel':-18})
    failure: Dictionary of string to PlpAchieveResultFailScenario.
    """
    def __init__(self):
        self.success = None
        self.success_time = None
        self.side_effects = {}
        self.failure = {}
        self.failure_time = None

    def add_failure(self, fail):
        self.failure[fail.name] = fail.probability

    def __repr__(self):
        return "AchieveEstimation( success:%s success_time:%s side_effects:%s failure:%s failure_time:%s )" % \
                    (self.success, self.success_time, repr(self.side_effects), repr(self.failure), self.failure_time)

class PLPMaintainEstimation(object):
    def __init__(self):
        self.success = None
        self.success_time = None
        self.side_effects = {}
        self.failure = {}
        self.failure_time = None
        self.time_until_true = None

    def add_failure(self, fail):
        self.failure[fail.name] = fail.probability

    def __repr__(self):
        return "MaintainEstimation( success:%s success_time:%s side_effects:%s failure:%s failure_time:%s time_until_condition_true:%s)" % \
                    (self.success, self.success_time, repr(self.side_effects), repr(self.failure), self.failure_time, self.time_until_true)

class PLPObserveEstimation(object):
    def __init__(self):
        self.side_effects = {}
        self.failure_to_observe_prob = None
        # Probability the observation is correct assuming the observation was performed
        self.observation_is_correct_prob = None
        self.success_time = None
        self.failure_time = None

    def __repr__(self):
        return "ObserveEstimation( observation_is_correct_prob:%s success_time:%s side_effects:%s failure_to_observe_prob:%s failure_time:%s)" % \
                    (self.observation_is_correct_prob, self.success_time, repr(self.side_effects), self.failure_to_observe_prob, self.failure_time)

class PLPDetectEstimation(object):
    def __init__(self):
        self.side_effects = {}
        self.detection_given_condition_prob = None

    def __repr__(self):
        return "DetectEstimation( detection_given_condition_prob:%s side_effects:%s)" % \
                    (self.detection_given_condition_prob, repr(self.side_effects))

class PLPMonitorMessage(object):
    """A message used for monitoring"""
    def __init__(self, monitor_name, is_ok, message ):
        self.monitor_name = monitor_name
        self.is_ok = is_ok
        self.message = message

    def __repr__(self):
        return 'PlpMonitorMessage("%s", "%s", "%s")' % \
            (self.monitor_name, self.is_ok, self.message)


class PLPTermination(object):
    """
    Generated by the PLP when it detects a termination condition has been met.
    To see whether the termination is a success or a failure, consult the `is_success` method.
    """
    def __init__(self, success, message):
        self.success = success
        self.message = message

    def is_success(self):
        return self.success

    def get_message(self):
        return self.message

