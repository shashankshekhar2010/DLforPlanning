package bgu.dl.features.collections;

import java.util.ArrayList;
import java.util.Iterator;

import pddl4j.exp.AtomicFormula;
import pddl4j.exp.action.Action;

import bgu.dl.features.learning.ProblemDetails;

/**
 * @author Shashank Shekhar
 * BGU of the Negev
 * @throws FileNotFoundException 
 */
public class DataSet {	
	ProblemDetails details =  null;
	ArrayList<ArrayList<ArrayList>> listOfParentChild = null;
	ArrayList<PossibleGroundedActions> groundedActions = null; 	

	public DataSet(ProblemDetails details) {
		this.details = details;
	}

	@SuppressWarnings("rawtypes")
	ArrayList initialState = this.details.getInitialState();
	@SuppressWarnings("rawtypes")
	ArrayList goalState = this.details.getGoalState();

	/**
	 * method generateSuccessorParentChild
	 * @return a list of two states (parent and its child)
	 * A state is also represented in form of a list
	 */
	public ArrayList<ArrayList<ArrayList>> generateSuccessor(ArrayList<ArrayList>parentChildNodes) 
	{
		ArrayList parentState = parentChildNodes.get(0);
		ArrayList childNode = parentChildNodes.get(1);


		return null;
	}

	public ArrayList<ArrayList> allPossibleStatetsInForwardDirection(ArrayList childNode) 
	{


		return null;
	}
	
	//Generate all relevant actions
	@SuppressWarnings("rawtypes")
	private ArrayList<PossibleGroundedActions> getApplicableActions(ArrayList<AtomicFormula> goal) 
	{
		ArrayList<PossibleGroundedActions> appActions= new ArrayList<PossibleGroundedActions>();
		Iterator itr = groundedActions.iterator();
		while(itr.hasNext()) {

			PossibleGroundedActions ga = (PossibleGroundedActions) itr.next();
			//System.out.println(ga.getGA().toString());
			ArrayList<AtomicFormula> posEff = ga.getPosEff();
			ArrayList<AtomicFormula> negEff = ga.getNegEff();

			//If pos effects of action is a subset of current goal and 
			//neg effects of action does not invalidate the current goal

			//			boolean flgPos = false, flgNeg = false;
			//			
			//			if(isSubsetOf(goal,posEff))
			//				flgPos = true;
			//			if(!isSubsetOf(negEff,goal))
			//				flgNeg = true;
			//			
			//			if( flgPos && flgNeg ) {				
			//
			//				//Mark action as relavant
			//				relActn.add(ga);
			//			}

			boolean flag = false;

			for(int i=0;i<goal.size();i++)
				for(int j=0;j<posEff.size();j++)
					if(goal.get(i).equals(posEff.get(j)))
						flag = true;

			for(int i=0;i<goal.size();i++)
				for(int j=0;j<negEff.size();j++)
					if(goal.get(i).equals(negEff.get(j)))
						flag = false;


			if( flag ) {				

				//Mark action as relavant
				relActn.add(ga);
			}			
		}

		return relActn;
	}



}


